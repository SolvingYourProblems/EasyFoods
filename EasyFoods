<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>EasyFoods Mejorada</title>
<style>
  body { font-family: Arial, sans-serif; background:#f9f9f9; margin:0; padding:0;}
  header { text-align:center; background:#4CAF50; color:white; padding:1em;}
  header img { max-width:200px; border-radius:10px; }
  main { padding: 1em; max-width: 700px; margin: auto;}
  label {display:block; margin-top:1em; font-weight:bold;}
  select, input[type="number"] {width:100%; padding:0.5em; font-size:1em;}
  button {margin-top:1em; padding:0.7em 1.2em; background:#4CAF50; color:#fff; border:none; border-radius:5px; cursor:pointer;}
  button:hover {background:#45a049;}
  ul {list-style:none; padding:0;}
  ul li {background:#e2f0d9; margin:0.3em 0; padding:0.6em; border-radius:4px;}
  #recipes {margin-top:2em;}
  .recipe {background:#fff; padding:1em; margin-bottom:1em; border-radius:6px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);}
  .recipe h3 {margin:0 0 0.5em 0;}
  #ingredients-list { margin-top: 0.5em; }
  #ingredients-list span {background:#8bc34a; color:#fff; padding:3px 7px; border-radius:12px; margin-right:5px; display:inline-block; margin-bottom:5px; cursor:pointer;}
  #ingredients-list span:hover {background:#558b2f;}
  #photo-section {margin-top:1em; text-align:center;}
  #photo-section img {max-width:100%; max-height:200px; margin-top:0.5em; border-radius:8px;}
</style>
</head>
<body>
<header>
  <h1>EasyFoods</h1>
  <img src="https://images.unsplash.com/photo-1504674900247-0877df9cc836?auto=format&fit=crop&w=700&q=80" alt="Familia cocinando" />
</header>
<main>
  <label for="ingredient-select">Selecciona ingredientes (puedes elegir varios):</label>
  <select id="ingredient-select" multiple size="8">
    <option value="apio">Apio</option>
    <option value="tomate">Tomate</option>
    <option value="pollo">Pollo</option>
    <option value="pescado">Pescado</option>
    <option value="zanahoria">Zanahoria</option>
    <option value="queso">Queso</option>
    <option value="arroz">Arroz</option>
    <option value="pasta">Pasta</option>
    <option value="cebolla">Cebolla</option>
    <option value="ajo">Ajo</option>
    <option value="lechuga">Lechuga</option>
  </select>

  <div id="ingredients-list"></div>

  <label for="calorie-input">Calorías máximas deseadas:</label>
  <input type="number" id="calorie-input" min="50" max="2000" step="10" placeholder="Ej. 500" />

  <label for="healthy-option">¿Quieres solo recetas saludables?</label>
  <select id="healthy-option">
    <option value="all">No importa</option>
    <option value="healthy">Sí, solo saludables</option>
  </select>

  <button id="search-btn">Buscar recetas</button>

  <div id="photo-section">
    <button id="take-photo-btn">Tomar o subir foto de ingredientes</button>
    <input type="file" id="input-file" accept="image/*" capture="environment" style="display:none" />
    <div id="photo-preview"></div>
  </div>

  <div id="recipes"></div>
</main>

<script>
  // Ingredientes seleccionados
  const selectedIngredients = new Set();

  const ingredientSelect = document.getElementById('ingredient-select');
  const ingredientsListDiv = document.getElementById('ingredients-list');
  const calorieInput = document.getElementById('calorie-input');
  const healthyOption = document.getElementById('healthy-option');
  const searchBtn = document.getElementById('search-btn');
  const recipesDiv = document.getElementById('recipes');

  // Foto y reconocimiento
  const takePhotoBtn = document.getElementById('take-photo-btn');
  const inputFile = document.getElementById('input-file');
  const photoPreview = document.getElementById('photo-preview');

  // Base de datos simple de recetas (solo ejemplo)
  const recipesDB = [
    {
      name: "Sopa de Apio y Zanahoria",
      ingredients: ["apio", "zanahoria", "cebolla", "ajo"],
      calories: 150,
      healthy: true,
      time: "30 min",
      description: "Una sopa ligera y saludable perfecta para días frescos."
    },
    {
      name: "Pollo al horno con arroz",
      ingredients: ["pollo", "arroz", "ajo", "cebolla"],
      calories: 600,
      healthy: false,
      time: "60 min",
      description: "Pollo jugoso acompañado de arroz especiado."
    },
    {
      name: "Ensalada fresca de lechuga y tomate",
      ingredients: ["lechuga", "tomate", "queso"],
      calories: 200,
      healthy: true,
      time: "10 min",
      description: "Ensalada rápida, fresca y saludable."
    },
    {
      name: "Pasta con salsa de tomate",
      ingredients: ["pasta", "tomate", "ajo", "queso"],
      calories: 550,
      healthy: false,
      time: "25 min",
      description: "Pasta con una rica salsa casera de tomate."
    },
    {
      name: "Filete de pescado a la plancha",
      ingredients: ["pescado", "ajo", "limón"],
      calories: 350,
      healthy: true,
      time: "20 min",
      description: "Pescado fresco y saludable para una comida ligera."
    }
  ];

  // Actualizar lista visual de ingredientes seleccionados
  function updateIngredientsList() {
    ingredientsListDiv.innerHTML = '';
    selectedIngredients.forEach(ing => {
      const span = document.createElement('span');
      span.textContent = ing;
      span.title = "Click para eliminar";
      span.onclick = () => {
        selectedIngredients.delete(ing);
        updateIngredientsList();
        updateSelectOptions();
      };
      ingredientsListDiv.appendChild(span);
    });
  }

  // Actualizar el <select> para reflejar la selección (sin duplicados)
  function updateSelectOptions() {
    for (let option of ingredientSelect.options) {
      option.selected = selectedIngredients.has(option.value);
    }
  }

  // Cuando se cambian las opciones del select
  ingredientSelect.addEventListener('change', () => {
    for (let option of ingredientSelect.options) {
      if (option.selected) selectedIngredients.add(option.value);
      else selectedIngredients.delete(option.value);
    }
    updateIngredientsList();
  });

  // Añadir ingredientes detectados por la IA a la selección
  function addIngredient(ing) {
    const validIngredients = [...ingredientSelect.options].map(o => o.value);
    if (validIngredients.includes(ing) && !selectedIngredients.has(ing)) {
      selectedIngredients.add(ing);
      updateIngredientsList();
      updateSelectOptions();
    }
  }

  // Función para buscar recetas filtradas
  function searchRecipes() {
    const maxCalories = parseInt(calorieInput.value) || 2000;
    const healthyOnly = healthyOption.value === 'healthy';

    const results = recipesDB.filter(recipe => {
      // Debe contener todos los ingredientes seleccionados
      const containsAll = [...selectedIngredients].every(ing => recipe.ingredients.includes(ing));
      if (!containsAll) return false;

      // Calorías
      if (recipe.calories > maxCalories) return false;

      // Saludable si aplica
      if (healthyOnly && !recipe.healthy) return false;

      return true;
    });

    showRecipes(results);
  }

  // Mostrar recetas en pantalla
  function showRecipes(recipes) {
    recipesDiv.innerHTML = '';
    if (recipes.length === 0) {
      recipesDiv.innerHTML = '<p>No se encontraron recetas que coincidan.</p>';
      return;
    }
    for (const r of recipes) {
      const div = document.createElement('div');
      div.className = 'recipe';
      div.innerHTML = `<h3>${r.name}</h3>
        <p><strong>Ingredientes:</strong> ${r.ingredients.join(', ')}</p>
        <p><strong>Calorías:</strong> ${r.calories} kcal</p>
        <p><strong>Tiempo de preparación:</strong> ${r.time}</p>
        <p>${r.description}</p>`;
      recipesDiv.appendChild(div);
    }
  }

  searchBtn.addEventListener('click', searchRecipes);

  // --- Reconocimiento por foto con Google Vision API ---

  takePhotoBtn.addEventListener('click', () => {
    inputFile.click();
  });

  inputFile.addEventListener('change', async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    // Mostrar vista previa
    const reader = new FileReader();
    reader.onload = e => {
      photoPreview.innerHTML = `<img src="${e.target.result}" alt="Foto subida" />`;
    };
    reader.readAsDataURL(file);

    // Convertir a base64 (sin header)
    const base64 = await toBase64(file);

    // Analizar la imagen
    const labels = await analyzeImage(base64);

    // Añadir etiquetas detectadas que sean ingredientes válidos
    labels.forEach(label => {
      addIngredient(label.toLowerCase());
    });
  });

  function toBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result.split(',')[1]);
      reader.onerror = error => reject(error);
    });
  }

  async function analyzeImage(base64Image) {
    const apiKey = 'TU_API_KEY_GOOGLE_CLOUD_VISION'; // <--- Aquí tu API Key

    const body = {
      requests: [
        {
          image: { content: base64Image },
          features: [{ type: "LABEL_DETECTION", maxResults: 10 }]
        }
      ]
    };

    try {
      const response = await fetch(`https://vision.googleapis.com/v1/images:annotate?key=${apiKey}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
      const data = await response.json();

      if(data.responses && data.responses[0].labelAnnotations) {
        return data.responses[0].labelAnnotations.map(l => l.description);
      } else {
        console.error("No se recibieron etiquetas.");
        return [];
      }
    } catch (error) {
      console.error("Error al analizar la imagen:", error);
      return [];
    }
  }
</script>
</body>
</html>
